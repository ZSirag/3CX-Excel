{"version":3,"file":"taskpane.js","mappings":";yBAAO,SAASA,EAAYC,EAASC,GACjCA,EAAgBA,GAAgB,IAWhC,IAVA,IAAIC,EAAa,IAAIC,OAEb,MAAQF,EAAR,iDAEYA,EAAe,aAE/B,MAEAG,EAAU,CAAC,IACXC,EAAa,KACVA,EAAaH,EAAWI,KAAMN,IAAU,CAC3C,IAOIO,EAPAC,EAAsBH,EAAY,GAElCG,EAAoBC,QACpBD,IAAwBP,GAExBG,EAAQM,KAAM,IAIdH,EADAF,EAAY,GACMA,EAAY,GAAIM,QAC9B,IAAIR,OAAQ,KAAQ,KACpB,KAGeE,EAAY,GAEpCD,EAASA,EAAQK,OAAS,GAAIC,KAAMH,EACvC,CACA,OAAQH,CACZ,i4BC/BA,u+OACA,IAqBIQ,EAAaC,EAAYC,EArBvBC,EAAgB,CAClBC,MAAO,CACL,CACEC,YAAa,WACbC,OAAQ,CACN,UAAW,CAAC,WAIlBC,wBAAwB,EACxBC,UAAU,GAGRC,EAAW,CACb,QAAW,6BACX,OAAU,cAGRC,EAAkB,WAIpBC,EAAgB,CAAEC,kBAAmB,KAAMC,SAAU,MACrDC,EAAU,KAyBd,SAASC,EAAgBC,EAASC,EAASC,GAEvC,IADA,IAAIC,EAAY,IAAIC,MACXC,EAAI,EAAGA,EAAIL,EAAQnB,OAAQwB,IAAK,CAEvC,IADA,IAAIC,EAAY,EAAIL,GACXM,EAAI,EAAGA,EAAIP,EAAQK,GAAGxB,OAAQ0B,IACrCD,EAAUJ,EAAOK,GAAK,GAAKP,EAAQK,GAAGE,GAExCJ,EAAUrB,KAAKwB,EACjB,CACA,OAAOH,CACX,CAGA,SAASK,EAAUC,GAEjB,IADA,IAAIC,EAAS,IAAIN,MACRC,EAAI,EAAGA,EAAII,EAAI5B,OAAQwB,IACjB,IAAVI,EAAIJ,IACLK,EAAO5B,KAAK2B,EAAIJ,IAGpB,IAAIM,EAAMC,KAAKD,IAAG,MAARC,KAAYF,GAClBG,EAAMD,KAAKC,IAAG,MAARD,KAAYF,GACtB,OAAoB,GAAjBA,EAAO7B,OACD,KAEF,CAACgC,IAAKA,EAAKF,IAAKA,EACzB,CAGA,SAASG,EAAcC,GACnB,IAAIC,EAAUD,EAAME,OAAOC,QAAQH,EAAME,OAAOE,eAAeC,QAAQJ,QACvED,EAAME,OAAOG,QAAQJ,QAAUA,CACnC,CAGA,SAASK,EAAQC,EAAMzC,EAAQ0C,GAG7B,IAFA,IAAIC,EAAS/B,EAASgC,OAClBC,EAAM,GACDrB,EAAI,EAAGsB,EAAIH,EAAO3C,OAAQwB,EAAIxB,IAAUwB,EAC/CqB,GAAOF,EAAOI,OAAOhB,KAAKiB,MAAMjB,KAAKkB,SAAWH,IAElD,GAAGL,EAAK,CACNI,EAAMA,EAAIK,MAAM,KAChBR,EAAUA,EAAQQ,MAAM,KAChBC,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMtB,KAAKkB,QAAQ,IACtD,IAAK,IAAIzB,EAAI,EAAGA,EAAIxB,EAAQwB,IACT,KAAdkB,EAAQlB,KACTqB,EAAIrB,GAAMZ,EAAS0C,QAAQP,OAAOhB,KAAKiB,MAAMjB,KAAKkB,SAAUrC,EAAS0C,QAAQtD,SAAUuD,qBAExE,KAAdb,EAAQlB,KACTqB,EAAIrB,GAAMZ,EAAS0C,QAAQP,OAAOhB,KAAKiB,MAAMjB,KAAKkB,SAAUrC,EAAS0C,QAAQtD,UAG9D,KAAd0C,EAAQlB,KACTqB,EAAIrB,GAAMZ,EAASgC,OAAOG,OAAOhB,KAAKiB,MAAMjB,KAAKkB,SAAUrC,EAASgC,OAAO5C,UAG/E6C,EAAMA,EAAIW,KAAK,GACjB,CACA,OAAOX,CACT,CAIO,SAAeY,IAAW,+BA+BjC,aAFC,OAED,cA/BO,uGAEKC,MAAMC,IAAG,6BAAC,WAAOC,GAAO,qGAGPC,EAAaD,EAAS,CAAEE,MAAO,IAAKC,IAAK,IAAKC,OAAQ,OAAO,OAAtE,OAARC,EAAW,EAAH,cACUJ,EAAaD,EAAS,CAAEE,MAAO,IAAKC,IAAK,IAAKC,OAAQ,OAAO,OAKtD,OALzBE,EAAY,EAAH,KAGPC,EAAWP,EAAQQ,SAASC,WAAWC,QAAQ,aACjDC,EAAgBJ,EAASK,SAASP,IACxBQ,KAAK,UAAU,UACvBb,EAAQc,OAAM,QASe,OAN/BvD,EAAUoD,EAAcI,OACxBvD,EAAUF,EAAgBC,EAASf,EAAWwE,KAAKC,SAASC,SAAU1E,EAAWwE,KAAKC,SAASE,SAG7FC,EAAiBpB,EAAQQ,SAASC,WAAWC,QAAQ,oBACvDW,EAAsBD,EAAeR,SAASN,IAC9BO,KAAK,UAAU,UAC7Bb,EAAQc,OAAM,QACpBO,EAAoBN,OAASvD,EAAQ,4CAEtC,mDAvBc,IAuBb,sDAEF8D,IAAY,wDAEjB,wBAGM,SAAeA,IAAS,+BAkC/B,aAFC,OAED,cAlCO,uGAEKxB,MAAMC,IAAG,6BAAC,WAAOC,GAAO,yEAGI,OAD1BuB,EAAQvB,EAAQQ,SAASC,WAAWI,KAAK,cAC3CW,EAAiB,IAAI7D,MAAO,SAC1BqC,EAAQc,OAAM,OACpBS,EAAME,MAAMC,SAAQ,SAACC,GACnBH,EAAenF,KAAKsF,EAAWC,KACjC,IACApF,EAAWqF,OAAOH,SAAQ,SAACI,EAAQlE,GACW,GAAxC4D,EAAeO,SAASD,EAAOE,OACjChC,EAAQQ,SAASC,WAAWwB,IAAIH,EAAOE,KAE3C,IAAE,2CAEH,mDAdc,IAcb,uBAGIlC,MAAMC,IAAG,6BAAC,WAAOC,GAAO,iEAC5BxD,EAAWqF,OAAOH,SAAQ,SAAAI,GACtB,IAAMI,EAAYlC,EAAQQ,SAASC,WAAWC,QAAQoB,EAAOE,MAC/CE,EAAUtB,SAASkB,EAAOK,OAClCpB,OAASe,EAAOM,MACPF,EAAUtB,SAASkB,EAAOK,MAAM7F,QAAQ,OAAQ,KACxD+F,aAAe,GAC1B,IAAG,2CACJ,mDARc,IAQb,uDAGAC,QAAQC,IAAI,EAAD,IAAQ,yDAE1B,wBAGM,SAAeC,IAAW,+BA+BjC,aAFC,OAED,cA/BO,oGACiBC,SAASC,eAAe,cAAa,OAA9C,GACU,IADnBC,EAAY,EAAH,MACCC,MAAU,0CAEd9C,MAAMC,IAAG,6BAAC,WAAOC,GAAO,6EAGkC,OAAxD6C,EAAU7C,EAAQQ,SAASC,WAAWC,QAAQ,WAAU,SAC1CT,EAAaD,EAAS,CAAEE,MAAO,IAAKC,IAAK,IAAKC,OAAQ,OAAO,OAUjF,OAVI0C,EAAU,EAAH,MACPC,EAAeF,EAAQjC,SAASkC,IACvB/B,OAAS,YACtBgC,EAAaC,eAAeC,KAAO,CACjCC,KAAM,CACJC,gBAAgB,EAChBC,OAAQ,GAAF,OAAM5G,EAAW6G,WAAWV,EAAUC,OAAOU,QAAS1D,KAAK,QAIrE,SACiBK,EAAaD,EAAS,CAAEE,MAAO,IAAKC,IAAK,IAAKC,OAAQ,OAAO,OAEjC,OAFzCmD,EAAO,EAAH,KACQV,EAAQjC,SAAS2C,GACvBxC,OAAS4B,EAAUhE,QAAQJ,QAAQ,UACvCyB,EAAQc,OAAM,4CAErB,mDApBc,IAoBb,uDAEFQ,IAAY,yDAGjB,wBAGM,SAAekC,EAAW,GAAD,+BAsChC,aAFC,OAED,cAtCO,WAA0BlF,GAAK,6EAKH,OAJ7BmF,EAAIhB,SAASiB,cAAc,KAC3BC,EAAUrF,EAAME,OAAOoF,GACvBjC,EAAyB,cAAXgC,EAA2B,iBAAmB,kBAC5DE,EAAsB,cAAXF,EAA2B,CAAEzD,MAAO,IAAKC,IAAK,KAAMC,OAAQ,MAAQ,CAAEF,MAAO,IAAKC,IAAK,IAAKC,OAAQ,MACnHqD,EAAEK,SAAW,GAAH,OAAMnC,EAAU,QAAO,kBAGzB7B,MAAMC,IAAG,6BAAC,WAAOC,GAAO,mGACCC,EAAaD,EAAS6D,GAAQ,OAGhC,OAHvBE,EAAmB,EAAH,KAChBC,EAAShE,EAAQQ,SAASC,WAAWC,QAAQiB,IAC7CsC,EAAcD,EAAOpD,SAASmD,IACtBlD,KAAK,UAAU,SACrBb,EAAQc,OAAM,OAUpB,IATIoD,EAAUD,EAAYlD,OACtBoD,EAAU,IAAIxG,MACD,kBAAdgE,EACDwC,EAAQ9H,KAAKG,EAAWqF,OAAO,GAAGO,MAAM,GAAGxC,KAAK,MAGhDuE,EAAQ9H,KAAKG,EAAWqF,OAAO,GAAGO,MAAM,GAAGxC,KAAK,MAGzChC,EAAI,EAAGA,EAAIsG,EAAQ9H,OAAQwB,IAClCuG,EAAQ9H,KAAK6H,EAAQtG,GAAGgC,KAAK,MAE3BwE,EAAI,IAAIC,KAAK,CAACF,EAAQvE,KAAK,OAAQ,CACrCf,KAAM,eAER4E,EAAEa,KAAOC,OAAOC,IAAIC,gBAAgBL,GACpCX,EAAEiB,QAAQ,4CACX,mDAvBc,IAuBb,yDAGFpC,QAAQC,IAAI,EAAD,IAAQ,0DAEtB,wBAGM,SAAeoC,IAAS,+BAwC9B,kCAxCM,0FAE4D,GAAjElC,SAASC,eAAe,iBAAiBkC,MAAMC,QAAU,QACvC,OAAftI,EAAoB,gBACrBuI,EAAWrC,SAASC,eAAe,aAAaE,MAAM,uCAEjC2B,OAAOQ,mBAAmBrI,GAAc,OAAlD,OAAkD,kBAA5DD,EAAU,eACQA,EAAWuI,UAAS,QAA7B,OAAJC,EAAO,EAAH,eACOA,EAAKC,OAAM,QAA5BJ,EAAW,EAAH,aAE0B,OAApCzH,EAAU3B,EAAWoJ,EAAU,KAAK,oBAG5BhF,MAAMC,IAAG,6BAAC,WAAOC,GAAO,qGAGAC,EAAaD,EAAS,CAAEE,MAAO,IAAKC,IAAK,IAAKC,OAAQ/C,EAAQjB,OAAS,IAAI,OAQvG,IARI+I,EAAkB,EAAH,KACnBjI,EAAcC,kBAAsBgI,EAAgB7I,QAAQW,EAAiB,IAAKqC,MAAM,KAAM,GAC9FpC,EAAcE,SAAWC,EAAQjB,OAAS,EAGpCgJ,EAAepF,EAAQQ,SAASC,WAAWC,QAAQ,gBACrDyB,EAAQiD,EAAaxE,SAASuE,GAC9BE,EAAO,IAAI1H,MACNC,EAAI,EAAGA,EAAIP,EAAQjB,OAAQwB,IAAK,CAIvC,IAHI0H,EAAqB9I,EAAWwE,KAAKuE,cACrCC,EAAM,EAAIF,EAAmBpE,WAC7B,GAAK7D,EAAQO,GAAG,GACXE,EAAI,EAAGA,EAAIwH,EAAmBG,OAAOrJ,OAAQ0B,IACpD0H,EAAIF,EAAmBG,OAAO3H,IAAMT,EAAQO,GAAG0H,EAAmBnE,QAAQrD,IAE5EuH,EAAKhJ,KAAKmJ,EACZ,CACqB,OAArBrD,EAAMtB,KAAK,UAAU,UACfb,EAAQc,OAAM,QACpBqB,EAAMpB,OAASsE,EAAK,4CACrB,mDAvBc,IAuBb,2DAEF/D,IAAY,2DAEf,wBAEM,SAAeoE,IAAS,+BA4B9B,kCA5BM,8EAC2D,GAAhEjD,SAASC,eAAe,iBAAiBkC,MAAMC,QAAU,OACnC,MAAlBxH,EAAQjB,OAAc,0CAEhB0D,MAAMC,IAAG,6BAAC,WAAOC,GAAO,qGAELC,EAAaD,EAAS,CAAEE,MAAO,IAAKC,IAAK,IAAKC,OAAQlD,EAAcE,WAAW,OAItG,IAJIuI,EAAa,EAAH,KACV9C,EAAU7C,EAAQQ,SAASC,WAAWC,QAAQ,WAC5CyB,EAAQU,EAAQjC,SAAS+E,GAC3BN,EAAO,IAAI1H,MACNC,EAAI,EAAGA,EAAIP,EAAQjB,OAAQwB,IAAK,CAIvC,IAHIgI,EAAMpJ,EAAWwE,KAAK6E,SACtBL,EAAM,EAAII,EAAI1E,WACd,GAAK7D,EAAQO,GAAG,GACXE,EAAI,EAAGA,EAAI8H,EAAIzE,QAAQ/E,OAAQ0B,IACtC0H,EAAI1H,GAAKT,EAAQO,GAAGgI,EAAIzE,QAAQrD,GAAK,GAEvC0H,EAAInJ,KAAKyJ,OAAO5I,EAAcC,mBAAqBS,EAAI,GACvDyH,EAAKhJ,KAAKmJ,EACZ,CACqB,OAArBrD,EAAMtB,KAAK,UAAU,UACfb,EAAQc,OAAM,QACpBqB,EAAMpB,OAASsE,EAAK,4CACrB,mDAnBc,IAmBb,uDAEF/D,IAAY,yDAGjB,wBAEM,SAAeyE,IAAU,+BA6D/B,kCA7DM,8EACL,IACEjG,MAAMC,IAAG,6BAAC,WAAOC,GAAO,uHACNC,EAAaD,EAAS,CAAEE,MAAO,IAAKC,IAAK,IAAKC,OAAQ,OAAO,OAAtE,OAAH4F,EAAM,EAAH,cACY/F,EAAaD,EAAS,CAAEE,MAAO,IAAKC,IAAK,IAAKC,OAAQ,OAAO,OAAtE,OAAN6F,EAAS,EAAH,cACmBhG,EAAaD,EAAS,CAAEE,MAAO,IAAKC,IAAK,KAAMC,OAAQ,OAAO,OAK/D,OALxB2D,EAAmB,EAAH,KAGdlB,EAAU7C,EAAQQ,SAASC,WAAWC,QAAQ,YAChDwF,EAAerD,EAAQjC,SAASoF,IACvBnF,KAAK,UAAU,UACtBb,EAAQc,OAAM,QAMQ,OALxBqF,EAAcD,EAAanF,OAC3BoD,EAAU7G,EAAgB6I,EAAa3J,EAAWwE,KAAKoF,cAAclF,SAAU1E,EAAWwE,KAAK6E,QAAQ1E,UAG3G+E,EAAerD,EAAQjC,SAASqF,IACnBpF,KAAK,UAAU,UACtBb,EAAQc,OAAM,QAGpB,GACkB,OAHduF,EAActI,EAAUmI,EAAanF,SAGnB,iBAGS,OAFvBqE,EAAepF,EAAQQ,SAASC,WAAWC,QAAQ,iBACrD4F,EAAgBlB,EAAaxE,SAAS,IAAD,OAAKyF,EAAYjI,IAAG,aAAKiI,EAAYnI,OAChE2C,KAAK,UAAU,UACvBb,EAAQc,OAAM,QACpB,IAASlD,EAAI,EAAGA,EAAIsI,EAAanF,OAAO3E,OAAQwB,IAElC,KADR2I,EAAQL,EAAanF,OAAOnD,MAE9B2I,EAAQT,OAAOS,GACfA,GAASF,EAAYjI,IACrB+F,EAAQvG,GAAGpB,EAAWwE,KAAKuE,aAAapE,QAAQ,IAAMmF,EAAcvF,OAAOwF,GAAO,GAClFpC,EAAQvG,GAAGpB,EAAWwE,KAAKuE,aAAapE,QAAQ,IAAMmF,EAAcvF,OAAOwF,GAAO,GAClFpC,EAAQvG,GAAGpB,EAAWwE,KAAKuE,aAAapE,QAAQ,IAAMmF,EAAcvF,OAAOwF,GAAO,IAGtF,QAIF,IAAQ3I,EAAI,EAAGA,EAAIuG,EAAQ/H,OAAQwB,IAAI,CACrC,IAASE,EAAI,EAAGA,EAAItB,EAAWwE,KAAKwF,YAAYC,IAAIrK,OAAQ0B,IAC1DqG,EAAQvG,GAAGpB,EAAWwE,KAAKwF,YAAYC,IAAI3I,GAAG,GAAKc,EAAQ,EAAGpC,EAAWwE,KAAKwF,YAAYE,UAAW,MAEvG,IAAS5I,EAAI,EAAGA,EAAItB,EAAWwE,KAAKwF,YAAYG,SAASvK,OAAQ0B,IAC/DqG,EAAQvG,GAAGpB,EAAWwE,KAAKwF,YAAYG,SAAS7I,GAAG,GAAKc,EAAQ,EAAGpC,EAAWwE,KAAKwF,YAAYI,eAAiBpK,EAAWwE,KAAKwF,YAAY1H,QAEhJ,CAKkC,OAF9BsH,EAAgBpG,EAAQQ,SAASC,WAAWC,QAAQ,mBACpDmG,EAAqBT,EAAcxF,SAASmD,IAC7BlD,KAAK,UAAU,UAC5Bb,EAAQc,OAAM,QACpB+F,EAAmB9F,OAASoD,EAAQ,4CACrC,mDAtDQ,GA0DX,CAHE,MAAO2C,GACPxE,QAAQC,IAAIuE,GACZxF,GACF,CAAC,2CACF,wBAmBD,aAFC,OAED,cAhBA,8EACEyF,MAAM,sEACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAM,IACtBF,MAAK,SAAAE,GACN,IAAIC,EAAS1E,SAASC,eAAe,cAErC,IAAK,IAAI0E,KADT5K,EAAa0K,GACqB7D,WAAY,CAC5C,IAAMgE,EAAM5E,SAASiB,cAAc,UACnC2D,EAAIC,UAAYF,EAChBC,EAAIzE,MAAQwE,EACZC,EAAI1I,QAAQJ,QAAU/B,EAAW6G,WAAW+D,GAAY7D,KACxD4D,EAAOI,YAAYF,EACrB,CACF,IAAE,4CACH,+BAGcpH,EAAa,EAAD,+CAoB1B,OApB0B,cAA3B,WAA4BD,EAASwH,GAAO,+EAEjB,OADrBC,EAAWzH,EAAQQ,SAASkH,oBACvB7G,KAAK,WAAW,SACnBb,EAAQc,OAAM,OAIpB,IAHIqB,EAAQsF,EAASE,QACjBC,EAAezF,EAAM7C,MAAM,KAAM,GACjCuI,EAAQD,EAAYtI,MAAM,KACrB1B,EAAI,EAAGA,EAAIiK,EAAMzL,OAAQwB,IAChCiK,EAAMjK,GAAKiK,EAAMjK,GAAGtB,QAAQW,EAAiB,IAC7B,GAAZ4K,EAAMjK,KACRiK,EAAMjK,GAAK,GAKd,GAFqB,MAAlB4J,EAAQpH,SACVyH,EAAM,GAAML,EAAQpH,OAAS0F,OAAO+B,EAAM,IAAO,GAE/B,GAAhBA,EAAMzL,OAAW,oDACToL,EAAQtH,OAAK,OAAG2H,EAAM,GAAE,YAAIL,EAAQrH,KAAG,OAAG0H,EAAM,KAAE,2CAEpDL,EAAQtH,OAAK,OAAG2H,EAAM,GAAE,YAAIL,EAAQrH,KAAG,OAAG0H,EAAM,KAAE,6CAC7D,sBA9YDC,OAAOC,SAAQ,SAACC,GACRA,EAAKC,OAASH,OAAOI,SAASpI,QAEhC2C,SAASC,eAAe,OAAOkC,MAAMC,QAAU,OAC/CpC,SAASC,eAAe,QAAQkC,MAAMC,QAAU,QAChDpC,SAASC,eAAe,cAAcyF,SAAW9J,EACjDoE,SAASC,eAAe,kBAAkB0F,QAAUrC,EACpDtD,SAASC,eAAe,mBAAmB0F,QAAUvI,EACrD4C,SAASC,eAAe,mBAAmB0F,QAAU5F,EACrDC,SAASC,eAAe,iBAAiB0F,QAAU9G,EACnDmB,SAASC,eAAe,iBAAiB0F,QAAUzD,EACnDlC,SAASC,eAAe,iBAAiB0F,QAAU1C,EACnDjD,SAASC,eAAe,cAAc0F,QAAU5E,EAChDf,SAASC,eAAe,kBAAkB0F,QAAU5E,EAChDe,QAAQA,OAAO8D,MACjB9L,EAAc,MACdkG,SAASC,eAAe,aAAakC,MAAMC,QAAU,SAsV5D,WAGoB,wBAvVfyD,GAEN","sources":["webpack://office-addin-taskpane-js/./src/taskpane/CSV.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["export function CSVToArray( strData, strDelimiter ){\r\n    strDelimiter = (strDelimiter || \",\");\r\n    var objPattern = new RegExp(\r\n        (\r\n            \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n            \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n            \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\r\n        ),\r\n        \"gi\"\r\n        );\r\n    var arrData = [[]];\r\n    var arrMatches = null;\r\n    while (arrMatches = objPattern.exec( strData )){\r\n        var strMatchedDelimiter = arrMatches[ 1 ];\r\n        if (\r\n            strMatchedDelimiter.length &&\r\n            strMatchedDelimiter !== strDelimiter\r\n            ){\r\n            arrData.push( [] );\r\n        }\r\n        var strMatchedValue;\r\n        if (arrMatches[ 2 ]){\r\n            strMatchedValue = arrMatches[ 2 ].replace(\r\n                new RegExp( \"\\\"\\\"\", \"g\" ),\r\n                \"\\\"\"\r\n                );\r\n        } else {\r\n             strMatchedValue = arrMatches[ 3 ];\r\n        }\r\n       arrData[ arrData.length - 1 ].push( strMatchedValue );\r\n    }\r\n    return( arrData );\r\n}","import { CSVToArray } from \"./CSV.js\";\r\n\r\nconst opzioniImport = {\r\n    types: [\r\n      {\r\n        description: 'File CSV',\r\n        accept: {\r\n          'excel/*': ['.csv']\r\n        }\r\n      },\r\n    ],\r\n    excludeAcceptAllOption: true,\r\n    multiple: false\r\n};\r\n  \r\nconst passSets = {\r\n    \"lettere\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\r\n    \"numeri\": \"0123456789\"\r\n}\r\n\r\nconst regexRangeRighe = /[^:0-9]/g;\r\nconst regexRangeColonne = /[^:A-Za-z]/g;\r\n\r\nvar loadinPlace, git_values, fileHandle;\r\nvar extImportData = { settings_rowstart: null, totalrow: null };\r\nvar csvData = null;\r\n\r\nOffice.onReady((info) => {\r\n    if (info.host === Office.HostType.Excel) {\r\n  \r\n      document.getElementById(\"msg\").style.display = \"none\";\r\n      document.getElementById(\"body\").style.display = \"block\";\r\n      document.getElementById(\"produttore\").onchange = updateDataset;   //FATTO\r\n      document.getElementById(\"btn_genInterni\").onclick = genInterni;   //DA FARE\r\n      document.getElementById(\"btn_genContatti\").onclick = genContatti; //FATTO\r\n      document.getElementById(\"btn_addTelefono\").onclick = addTelefono; //FATTO\r\n      document.getElementById(\"btn_genPagine\").onclick = genPagine;     //FATTO\r\n      document.getElementById(\"btn_importCSV\").onclick = importCSV;     //FATTO\r\n      document.getElementById(\"btn_importEXT\").onclick = importEXT;     //FATTO\r\n      document.getElementById(\"export_EXT\").onclick = export_csv;       //FATTO\r\n      document.getElementById(\"export_CONTACT\").onclick = export_csv;   //FATTO\r\n      if (window!=window.top){\r\n        loadinPlace = \"web\";\r\n        document.getElementById(\"webimport\").style.display = \"block\";\r\n      }\r\n      gitVal();\r\n    }\r\n});\r\n  \r\n//FUNZIONI SYNC\r\nfunction combineTemplate(sourceA, sourceB, offset) {\r\n    let tmpArrayY = new Array;  \r\n    for (let i = 0; i < sourceA.length; i++) {\r\n      let tmpArrayX = [...sourceB];\r\n      for (let j = 0; j < sourceA[i].length; j++) {\r\n        tmpArrayX[offset[j] - 1] = sourceA[i][j];\r\n      }\r\n      tmpArrayY.push(tmpArrayX);\r\n    }\r\n    return tmpArrayY;\r\n}\r\n\r\n//RITORNA IL VALORE MINIMO E IL MASSIMO DI UN ARRAY\r\nfunction getMinMax(arr) {\r\n  let tmpArr = new Array();\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if(arr[i] != \"\"){\r\n      tmpArr.push(arr[i]);\r\n    }\r\n  }\r\n  let max = Math.max(...tmpArr);\r\n  let min = Math.min(...tmpArr);\r\n  if(tmpArr.length == 0){\r\n    return null;\r\n  }\r\n  return {min: min, max: max};\r\n}\r\n\r\n//AGGIORNA IL TAG SELECT CON IL DATASET DEL OPTION SELEZIONATO\r\nfunction updateDataset(event) {\r\n    let numRiga = event.target.options[event.target.selectedIndex].dataset.numRiga;\r\n    event.target.dataset.numRiga = numRiga;\r\n}\r\n\r\n//GENERA CREDENZIALI - 0 PER PIN, 1 PER PASSWORD\r\nfunction genPass(type, length, pattern) {\r\n  let tmpSet = passSets.numeri;\r\n  let psw = \"\";\r\n  for (let i = 0, n = tmpSet.length; i < length; ++i) {\r\n    psw += tmpSet.charAt(Math.floor(Math.random() * n));\r\n  }\r\n  if(type){\r\n    psw = psw.split(\"\");\r\n    pattern = pattern.split(\"\");\r\n    pattern.sort(function(a, b){return 0.5 - Math.random()});\r\n    for (let i = 0; i < length; i++) {\r\n      if(pattern[i] == \"x\"){\r\n        psw[i] = (passSets.lettere.charAt(Math.floor(Math.random()* passSets.lettere.length))).toLocaleLowerCase();\r\n      }\r\n      if(pattern[i] == \"X\"){\r\n        psw[i] = (passSets.lettere.charAt(Math.floor(Math.random()* passSets.lettere.length)));\r\n      }\r\n      \r\n      if(pattern[i] == \"1\"){\r\n        psw[i] = (passSets.numeri.charAt(Math.floor(Math.random()* passSets.numeri.length)));\r\n      }\r\n    }\r\n    psw = psw.join(\"\");\r\n  }\r\n  return psw;\r\n}\r\n\r\n//FUNZIONI ASYNC\r\n// GENERAZIONE CONTATTI\r\nexport async function genContatti() {\r\n    try {\r\n      await Excel.run(async (context) => {\r\n \r\n        //RECUPERO SELEZIONE\r\n        let srcRange = await selezioneADV(context, { start: \"A\", end: \"I\", rowend: null });\r\n        let destRange = await selezioneADV(context, { start: \"A\", end: \"N\", rowend: null });\r\n  \r\n        //INIZIO PRELIEVO DATI\r\n        const Contatti = context.workbook.worksheets.getItem(\"Contatti\");\r\n        let rangeContatti = Contatti.getRange(srcRange);\r\n        rangeContatti.load(\"values\");\r\n        await context.sync();\r\n  \r\n        //UNISCO I DATI PRELEVATI AL TEMPLATE DEI CONTATTI\r\n        let sourceA = rangeContatti.values;\r\n        let sourceB = combineTemplate(sourceA, git_values.conf.contatti.template, git_values.conf.contatti.offsets);\r\n\r\n        //CARICO DATI\r\n        const UscitaContatti = context.workbook.worksheets.getItem(\"Uscita contatti\");\r\n        let rangeUscitaContatti = UscitaContatti.getRange(destRange);\r\n        rangeUscitaContatti.load(\"values\");\r\n        await context.sync();\r\n        rangeUscitaContatti.values = sourceB;\r\n  \r\n      });\r\n    } catch (error) {\r\n      genPagine();\r\n    }\r\n}\r\n\r\n//GENRAZIONE PAGINE \r\nexport async function genPagine() {\r\n    try {\r\n      await Excel.run(async (context) => {\r\n        //CREATE PAGE \r\n        const names = context.workbook.worksheets.load(\"items/name\");\r\n        let paginePresenti = new Array();\r\n        await context.sync();\r\n        names.items.forEach((nomePagina) => {\r\n          paginePresenti.push(nomePagina.name);\r\n        })\r\n        git_values.pagine.forEach((pagina, i) => {\r\n          if (paginePresenti.includes(pagina.nome) == false) {\r\n            context.workbook.worksheets.add(pagina.nome);\r\n          }\r\n        })\r\n  \r\n      });\r\n\r\n      //LOAD DATA\r\n      await Excel.run(async (context) => {\r\n        git_values.pagine.forEach(pagina => {\r\n            const selPagina = context.workbook.worksheets.getItem(pagina.nome);\r\n            const range = selPagina.getRange(pagina.range);\r\n            range.values = pagina.celle;\r\n            const range2 = selPagina.getRange(pagina.range.replace(/\\d+/g, \"\"));\r\n            range2.numberFormat = \"@\";\r\n        });\r\n      });\r\n  \r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//AGGIUNGE MUNU A TENDINA PER SELEZIONARE MODELLI DEI TELEFONI\r\nexport async function addTelefono() {\r\n  let selectVal = await document.getElementById(\"produttore\");\r\n  if (selectVal.value != 0) {\r\n    try {\r\n      await Excel.run(async (context) => {\r\n\r\n        // IMPOSTO MODELLI DA SELEZIONARE\r\n        const Interni = context.workbook.worksheets.getItem(\"Interni\");\r\n        let modello = await selezioneADV(context, { start: \"G\", end: \"G\", rowend: null });\r\n        let rangeModello = Interni.getRange(modello);\r\n        rangeModello.values = \"Seleziona\";\r\n        rangeModello.dataValidation.rule = {\r\n          list: {\r\n            inCellDropDown: true,\r\n            source: `${(git_values.produttori[selectVal.value].modelli).join(\",\")}`\r\n          }\r\n        }; \r\n\r\n        //METTO RIGA INTERNO\r\n        let riga = await selezioneADV(context, { start: \"I\", end: \"I\", rowend: null });\r\n        let rangeRiga = Interni.getRange(riga);\r\n        rangeRiga.values = selectVal.dataset.numRiga;\r\n        await context.sync();\r\n\r\n      });\r\n    } catch (error) {\r\n      genPagine();\r\n    }\r\n  }\r\n}\r\n\r\n//ESPORTA INTERNI IN FORMATO CSV SEPARATO DA VIRGOLA\r\nexport async function export_csv(event){\r\n  var c = document.createElement(\"a\");\r\n  let typeBTN = event.target.id;\r\n  let nomePagina = (typeBTN == \"export_EXT\") ? \"Uscita interni\" : \"Uscita contatti\";\r\n  let opzioni = (typeBTN == \"export_EXT\") ? { start: \"A\", end: \"BH\", rowend: null }: { start: \"A\", end: \"N\", rowend: null };\r\n  c.download = `${nomePagina}.csv`;\r\n\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      let setUscitaInterni = await selezioneADV(context, opzioni);\r\n      let uscita = context.workbook.worksheets.getItem(nomePagina);\r\n      let rangeuscita = uscita.getRange(setUscitaInterni);\r\n      rangeuscita.load(\"values\");\r\n      await context.sync();\r\n      let rawData = rangeuscita.values;\r\n      let dataOut = new Array();\r\n      if(nomePagina == \"Uscita interni\"){\r\n        dataOut.push(git_values.pagine[3].celle[0].join(\",\"));\r\n      }\r\n      else{\r\n        dataOut.push(git_values.pagine[4].celle[0].join(\",\"));  \r\n      }\r\n\r\n      for (let i = 0; i < rawData.length; i++) {\r\n        dataOut.push(rawData[i].join(\",\"));\r\n      }\r\n      var t = new Blob([dataOut.join(\"\\n\")], {\r\n        type: \"text/plain\"\r\n      });\r\n      c.href = window.URL.createObjectURL(t);\r\n      c.click();\r\n    });\r\n  }\r\n  catch(error){\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n//IMPORTA CSV GENERATO DA 3CX \r\nexport async function importCSV() {\r\n  var contents;\r\n  document.getElementById(\"btn_importEXT\").style.display = \"block\";\r\n  if(loadinPlace == \"web\"){\r\n    contents = document.getElementById(\"webimport\").value;\r\n  }else{\r\n    [fileHandle] = await window.showOpenFilePicker(opzioniImport);\r\n    const file = await fileHandle.getFile();\r\n    contents = await file.text();\r\n  }\r\n  csvData = CSVToArray(contents, \",\");\r\n  \r\n  try {\r\n    await Excel.run(async (context) => {\r\n\r\n      //PREPARO SELEZIONE E IMPORT DEI INTERNI\r\n      let selImpostazioni = await selezioneADV(context, { start: \"A\", end: \"F\", rowend: csvData.length - 1 });\r\n      extImportData.settings_rowstart = ((selImpostazioni.replace(regexRangeRighe, \"\")).split(\":\"))[0];\r\n      extImportData.totalrow = csvData.length - 1;\r\n\r\n      //SELEZIONE E IMPORTO DATI\r\n      const Impostazioni = context.workbook.worksheets.getItem(\"Impostazioni\");\r\n      let range = Impostazioni.getRange(selImpostazioni);\r\n      let data = new Array();\r\n      for (let i = 1; i < csvData.length; i++) {\r\n        let Confg_impostazioni = git_values.conf.impostazioni;\r\n        let row = [...Confg_impostazioni.template];\r\n        row[0] = csvData[i][0];\r\n        for (let j = 0; j < Confg_impostazioni.import.length; j++) {\r\n          row[Confg_impostazioni.import[j]] = csvData[i][Confg_impostazioni.offsets[j]];\r\n        }\r\n        data.push(row);\r\n      }\r\n      range.load(\"values\");\r\n      await context.sync();\r\n      range.values = data;\r\n    })\r\n  } catch (error) {\r\n    genPagine();\r\n  }\r\n}\r\n\r\nexport async function importEXT() {\r\n  document.getElementById(\"btn_importEXT\").style.display = \"none\";\r\n  if (csvData.length != null) {\r\n    try {\r\n      await Excel.run(async (context) => {\r\n        //USCITA INTERNI\r\n        let selInterni = await selezioneADV(context, { start: \"A\", end: \"I\", rowend: extImportData.totalrow });\r\n        let Interni = context.workbook.worksheets.getItem(\"Interni\");\r\n        const range = Interni.getRange(selInterni);\r\n        let data = new Array();\r\n        for (let i = 1; i < csvData.length; i++) {\r\n          let cfg = git_values.conf.interni;\r\n          let row = [...cfg.template];\r\n          row[0] = csvData[i][0];\r\n          for (let j = 0; j < cfg.offsets.length; j++) {\r\n            row[j] = csvData[i][cfg.offsets[j] - 1];\r\n          }\r\n          row.push(Number(extImportData.settings_rowstart) + i - 1);\r\n          data.push(row);\r\n        }\r\n        range.load(\"values\");\r\n        await context.sync();\r\n        range.values = data;\r\n      })\r\n    } catch (error) {\r\n      genPagine();\r\n    }\r\n  }\r\n}\r\n\r\nexport async function genInterni() {\r\n  try {\r\n    Excel.run(async (context) => {\r\n      let ext = await selezioneADV(context, { start: \"A\", end: \"H\", rowend: null });                 // PAGINA INTERNI \r\n      let setSel = await selezioneADV(context, { start: \"I\", end: \"I\", rowend: null });             //PAGINA INTERNI RIGA IMPOSTAZIONI\r\n      let setUscitaInterni = await selezioneADV(context, { start: \"A\", end: \"BH\", rowend: null }); //PAGINA USCITA INTERNI\r\n\r\n      //IMPORTO INTERNI DA PAGINA IMPOSTAZIONI\r\n      const Interni = context.workbook.worksheets.getItem(\"Interni\");\r\n      let rangeInterni = Interni.getRange(ext);\r\n      rangeInterni.load(\"values\");\r\n      await context.sync();\r\n      let dataInterni = rangeInterni.values;\r\n      let dataOut = combineTemplate(dataInterni, git_values.conf.uscitaInterni.template, git_values.conf.interni.offsets);\r\n\r\n      //CONTROLLO RIGA IMPOSTAZIONI PER RECUPERO XML\r\n      rangeInterni = Interni.getRange(setSel);\r\n      rangeInterni.load(\"values\");\r\n      await context.sync();\r\n      let tmpSettings = getMinMax(rangeInterni.values); \r\n      \r\n      // IMPORTO XML DA PAGINA IMPOSTAZIONI\r\n      if(tmpSettings != null){\r\n        const Impostazioni = context.workbook.worksheets.getItem(\"Impostazioni\");\r\n        let rangeSettings = Impostazioni.getRange(`B${tmpSettings.min}:F${tmpSettings.max}`);\r\n        rangeSettings.load(\"values\");\r\n        await context.sync();\r\n        for (let i = 0; i < rangeInterni.values.length; i++) {\r\n          let index = rangeInterni.values[i];\r\n          if(index != \"\"){\r\n            index = Number(index);\r\n            index -= tmpSettings.min;\r\n            dataOut[i][git_values.conf.impostazioni.offsets[0]] = rangeSettings.values[index][0];\r\n            dataOut[i][git_values.conf.impostazioni.offsets[1]] = rangeSettings.values[index][3];\r\n            dataOut[i][git_values.conf.impostazioni.offsets[2]] = rangeSettings.values[index][4];\r\n          }\r\n        }\r\n        //dataOut = await combineArray(dataOut, tmpArr2.shift() , git_values.conf.impostazioni.offsets);\r\n      }\r\n      \r\n      //SETTO PWD\r\n      for(let i = 0; i < dataOut.length; i++){\r\n        for (let j = 0; j < git_values.conf.credenziali.pin.length; j++) {\r\n          dataOut[i][git_values.conf.credenziali.pin[j]-1] = genPass(0, git_values.conf.credenziali.pinLength, null);\r\n        }\r\n        for (let j = 0; j < git_values.conf.credenziali.password.length; j++) {\r\n          dataOut[i][git_values.conf.credenziali.password[j]-1] = genPass(1, git_values.conf.credenziali.passwordLength,  git_values.conf.credenziali.pattern);\r\n        }\r\n      }\r\n      \r\n      //POPOLO USCITA INTERNI\r\n      let uscitaInterni = context.workbook.worksheets.getItem(\"Uscita interni\");\r\n      let rangeUscitaInterni = uscitaInterni.getRange(setUscitaInterni);\r\n      rangeUscitaInterni.load(\"values\");\r\n      await context.sync();\r\n      rangeUscitaInterni.values = dataOut;\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    genPagine();\r\n  }\r\n}\r\n\r\n\r\nasync function gitVal() {\r\n  fetch('https://raw.githubusercontent.com/ZSirag/3CX-Excel/main/addin.json')\r\n    .then(res => res.json())\r\n    .then(json => {\r\n    let selElm = document.getElementById(\"produttore\");\r\n    git_values = json;\r\n    for (var produttore in git_values.produttori) {\r\n      const elm = document.createElement(\"option\");\r\n      elm.innerHTML = produttore;\r\n      elm.value = produttore;\r\n      elm.dataset.numRiga = git_values.produttori[produttore].riga;\r\n      selElm.appendChild(elm);\r\n    }\r\n  })\r\n}\r\n\r\n//RITORNA IL NUMERO DI RIGHE SELEZIONATO CON LE COLENNE PASSATE COME ARGOMENTO\r\nasync function selezioneADV(context, colonne) {\r\n  let tmpRange = context.workbook.getSelectedRange();\r\n  tmpRange.load(\"address\");\r\n  await context.sync();\r\n  let range = tmpRange.address;\r\n  let paginaTolta = (range.split(\"!\"))[1];\r\n  let righe = paginaTolta.split(\":\");\r\n  for (let i = 0; i < righe.length; i++) {\r\n    righe[i] = righe[i].replace(regexRangeRighe, \"\");\r\n    if (righe[i] == 1) {\r\n      righe[i] = 2\r\n    }\r\n  }\r\n  if (colonne.rowend != null) {\r\n    righe[1] = (colonne.rowend + Number(righe[0])) - 1;\r\n  }\r\n  if (righe.length == 1) {\r\n    return `${colonne.start}${righe[0]}:${colonne.end}${righe[0]}`;\r\n  }\r\n  return `${colonne.start}${righe[0]}:${colonne.end}${righe[1]}`;\r\n}\r\n  \r\n"],"names":["CSVToArray","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedValue","strMatchedDelimiter","length","push","replace","loadinPlace","git_values","fileHandle","opzioniImport","types","description","accept","excludeAcceptAllOption","multiple","passSets","regexRangeRighe","extImportData","settings_rowstart","totalrow","csvData","combineTemplate","sourceA","sourceB","offset","tmpArrayY","Array","i","tmpArrayX","j","getMinMax","arr","tmpArr","max","Math","min","updateDataset","event","numRiga","target","options","selectedIndex","dataset","genPass","type","pattern","tmpSet","numeri","psw","n","charAt","floor","random","split","sort","a","b","lettere","toLocaleLowerCase","join","genContatti","Excel","run","context","selezioneADV","start","end","rowend","srcRange","destRange","Contatti","workbook","worksheets","getItem","rangeContatti","getRange","load","sync","values","conf","contatti","template","offsets","UscitaContatti","rangeUscitaContatti","genPagine","names","paginePresenti","items","forEach","nomePagina","name","pagine","pagina","includes","nome","add","selPagina","range","celle","numberFormat","console","log","addTelefono","document","getElementById","selectVal","value","Interni","modello","rangeModello","dataValidation","rule","list","inCellDropDown","source","produttori","modelli","riga","export_csv","c","createElement","typeBTN","id","opzioni","download","setUscitaInterni","uscita","rangeuscita","rawData","dataOut","t","Blob","href","window","URL","createObjectURL","click","importCSV","style","display","contents","showOpenFilePicker","getFile","file","text","selImpostazioni","Impostazioni","data","Confg_impostazioni","impostazioni","row","import","importEXT","selInterni","cfg","interni","Number","genInterni","ext","setSel","rangeInterni","dataInterni","uscitaInterni","tmpSettings","rangeSettings","index","credenziali","pin","pinLength","password","passwordLength","rangeUscitaInterni","error","fetch","then","res","json","selElm","produttore","elm","innerHTML","appendChild","colonne","tmpRange","getSelectedRange","address","paginaTolta","righe","Office","onReady","info","host","HostType","onchange","onclick","top","gitVal"],"sourceRoot":""}